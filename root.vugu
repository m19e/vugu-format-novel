<div class="my-first-vugu-comp" style="height: 100vh;">
    <div class="container-fluid p-5">
        <div class="form-group" style="position: relative;">
            <textarea
                id="text"
                @input="data.HandleChange(event)"
                class="form-control"
                placeholder="Text"
                style="height: 35vh; resize: none;"
            ></textarea>
            <p
                style="
                    position: absolute;
                    right: 3vw;
                    bottom: 1vh;
                    margin: 0;
                    color: gray;
                "
            >
                <span vg-html="data.PureCount"></span>(<span
                    vg-html="data.PlainCount"
                ></span
                >) words
            </p>
        </div>
        <button @click="data.Format()" class="btn btn-primary btn-lg btn-block">
            Format
        </button>
        <div class="form-group my-3">
            <textarea
                id="result"
                vg-html="data.Result"
                class="form-control"
                style="height: 40vh; resize: none;"
                placeholder="Result"
                readonly
            ></textarea>
        </div>
        <button type="button" @click="data.Copy()" class="btn btn-primary">
            Copy
        </button>
    </div>

    <link
        rel="stylesheet"
        href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
        crossorigin="anonymous"
    />
</div>

<style>
    .my-first-vugu-comp {
        background: #eee;
    }
</style>

<script type="application/x-go">
    import (
        "regexp"
        "strings"
        "syscall/js"
    )

    type RootData struct {
        Text string
        Result string
        PlainCount int
        PureCount int
    }

    const checkList = "　「『#"

    func (data *RootData) HandleChange(event *vugu.DOMEvent) {
        data.Text = event.JSEvent().Get("target").Get("value").String()
        data.PlainCount = wc(data.Text)
        data.PureCount = wc(trim(data.Text))
    }

    func (data *RootData) Copy() {
        js.Global().Get("document").Call("getElementById", "result").Call("select")
        js.Global().Get("document").Call("execCommand", "Copy")
        js.Global().Get("window").Call("getSelection").Call("removeAllRanges")
    }

    func wc(s string) int {
        return len([]rune(s))
    }

    func trim(s string) string {
        return strings.NewReplacer(
            "\r\n", "",
            "\r", "",
            "\n", "",
            "\t", "",
            "　", "",
            " ", "",
        ).Replace(s)
    }

    func checkBOL(s string) bool {
        if s == "" { return false }
        if strings.Contains(checkList, string([]rune(s)[:1])) { return false }
        return true
    }

    func (data *RootData) Format() {
        var result string
        txt := data.Text
        r := regexp.MustCompile(`([？！])([^　？！」』])`)
        txt = r.ReplaceAllString(txt, "${1}　${2}")
        slice := strings.Split(txt, "\n")
        for _, str := range slice {
            if checkBOL(str) { str = "　" + str }
            result += str + "\n"
        }
        data.Result = result
    }
</script>
